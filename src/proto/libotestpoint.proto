/*
 * Copyright (c) 2014-2016 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Adjacent Link LLC nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

syntax = "proto2";

package OpenTestPoint;

option optimize_for = SPEED;

message ProbeRequest
{
  message Create
  {
    message Plugin
    {
      required string name = 1;
    }

    message Python
    {
      required string module = 1;
      required string class = 2;
    }

    enum Type
    {
      TYPE_PLUGIN = 1;
      TYPE_PYTHON = 2;
    }

    required Type type= 1;
    optional Plugin plugin = 2;
    optional Python python = 3;
  }

  message Initialize
  {
    optional string configuration = 1;
  }

  message Start{}

  message Stop{}

  message Destroy{}

  enum Type
   {
     TYPE_CREATE = 1;
     TYPE_INITIALIZE = 2;
     TYPE_START = 3; // no body
     TYPE_STOP = 4; // no body
     TYPE_DESTROY = 5; // no body
   }

  required Type type = 1;
  optional Create create = 2;
  optional Initialize initialize = 3;
}


message ProbeResponse
{
  message Error
  {
    required string what = 1;
  }

  message Initialize
  {
    repeated string names = 1;
  }
  
  enum Type
  {
    TYPE_SUCCESS = 1;
    TYPE_ERROR = 2;
    TYPE_INITIALIZE = 3;
  }
  
  required Type type = 1;
  optional Initialize initialize = 2;
  optional Error error = 3;
}

message ProbeStatusReport
{
  message Error
  {
    required string what = 1;
  }

  message Ready
  {
    required string logControl = 1;
    required string logPublish = 2;
    required string probeControl = 3;
    required string probePublish = 4;
  }
  
  enum Type
  {
    TYPE_ERROR = 1;
    TYPE_READY = 2;
  }

  required Type type = 1;
  optional Error error = 2;
  optional Ready ready = 3;
}

message ProbeStatusResponse
{
  message Error
  {
    required string what = 1;
  }
  
  enum Type
  {
    TYPE_ERROR = 1;
    TYPE_SUCCESS = 2;
  }

  required Type type = 1;
  optional Error error = 2;
}
