/*
 * Copyright (c) 2014,2016 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Adjacent Link LLC nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

#include <Python.h>
#include "otestpoint/toolkit/pythonutils.h"
#include "otestpoint/toolkit/raiipython.h"

OpenTestPoint::Toolkit::Exception
OpenTestPoint::Toolkit::PythonUtils::makeExceptionFromTrace()
{
  // exception occured
  PyObject* type = NULL;
  PyObject* value = NULL;
  PyObject* trace = NULL;

  PyErr_Fetch(&type, &value, &trace);

  RAIIPyObject pType{type};
  RAIIPyObject pValue{value};
  RAIIPyObject pTrace{trace};

  if(!pTrace)
    {
      return Exception{"missing method"};
    }
  else
    {
      // new refernce
      RAIIPyObject pTracebackModule{PyImport_ImportModuleNoBlock("traceback")};

      // new object
      RAIIPyObject pList{PyObject_CallMethod(pTracebackModule.get(),
                                             const_cast<char *>("format_exception"),
                                             const_cast<char *>("OOO"),
                                             pType.get(),
                                             pValue.get(),
                                             pTrace.get())};

      // new reference
      RAIIPyObject pEndl{PyUnicode_FromString("\n")};

      // new reference
      RAIIPyObject pJoined{PyUnicode_Join(pEndl.get(),pList.get())};

      // new reference
      RAIIPyObject pError{PyUnicode_AsUTF8String(pJoined.get())};

      return Exception{"%s",PyString_AsString(pError.get())};
    }
}
